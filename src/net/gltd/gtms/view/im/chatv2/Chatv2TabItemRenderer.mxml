<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:utils="net.gltd.gtms.view.im.utils.*"
				autoDrawBackground="false" rightClick="showContextMenu(event)"
				height="52" width="100%">
	<fx:Script>
		<![CDATA[
			import net.gltd.gtms.GUI.contextMenu.ContextMenu;
			import net.gltd.gtms.GUI.contextMenu.ContextMenuItem;
			import net.gltd.gtms.controller.im.ShowStatusManager;
			import net.gltd.gtms.events.ChatEvent;
			import net.gltd.gtms.model.im.MessageModel;
			
			import spark.components.supportClasses.TextBase;
			
			protected function closeClick(event:MouseEvent):void
			{
				var e:ChatEvent = new ChatEvent(ChatEvent.CHAT_CLOSED);
				e.id = data.id;
				owner.dispatchEvent(e);
			}
			private function separate():void {
				data.openNewWindow();
				var e:ChatEvent = new ChatEvent(ChatEvent.SEPARATED_WINDOW);
				e.id = data.id;
				owner.dispatchEvent(e)
			}
			private function moveBack():void {
				data.openNewWindow(true);
				var e:ChatEvent = new ChatEvent(ChatEvent.MOVE_BACK);
				e.id = data.id;
				owner.dispatchEvent(e);
			}
			protected function showContextMenu(event:MouseEvent):void
			{
				//var e:ChatEvent = new ChatEvent();
				var items:Vector.<net.gltd.gtms.GUI.contextMenu.ContextMenuItem> = data.bd.renderMenuItemsFunction(data.bd);
				var newItems:Vector.<net.gltd.gtms.GUI.contextMenu.ContextMenuItem> = new Vector.<net.gltd.gtms.GUI.contextMenu.ContextMenuItem>();
				

				for (var i:uint = 0; i< items.length; i++){
					if (items[i].label != "Chat"){
						newItems.push( items[i] )
					}
				}
				
				newItems.push(new net.gltd.gtms.GUI.contextMenu.ContextMenuItem(UIphrases.OPEN_IN_SEPARATE_WINDINDOW,null,	owner['dataProvider'].length > 1,true,this.separate) );
				
				if ((data as MessageModel).hasOwnWindow) newItems.push(new net.gltd.gtms.GUI.contextMenu.ContextMenuItem(UIphrases.BACK_TO_MAIN_WINDOW,null,true,false,this.moveBack) );
				
				newItems.push(new net.gltd.gtms.GUI.contextMenu.ContextMenuItem("Close Chat",null,true,false,this.closeClick,[null]) );
				
				net.gltd.gtms.GUI.contextMenu.ContextMenu.ShowMenu( event, newItems );
				
			}
			
			TextBase.mx_internal::truncationIndicatorResource = "...";
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected"  stateGroups="selectedStates" />
		<s:State name="hovered" />
		<s:State name="down" />
		<s:State name="hoveredAndShowsCaret" stateGroups="selectedStates" />
	</s:states>
	<s:Rect radiusX="4" radiusY="4" top="0" left="0" bottom="0" right="0">
		<s:stroke>
			<s:SolidColorStroke color="#dadee2" alpha=".85"/>
		</s:stroke>
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates=".91" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered=".9" alpha=".9"/>
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates="1" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered=".9" alpha="1"/>
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates="1" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered="1" alpha="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	
	<s:BitmapImage width="41"
				   height="40"
				   smooth="true"
				   source="{data.bd.avatar.foto}" 
				   scaleMode="zoom" verticalAlign="middle" horizontalAlign="left" 
				   left="6" top="6"
				   />
		
	<utils:ShowLed top="6" left="49" showLed="{data.bd.show}" 	/>
	<s:Label text="{data.bd.nickname}" left="66" right="{12 + Number(data.bd.ico!=null)*17}" top="8" styleName="_contactItemDN" color="#000000" color.selectedStates="#FFFFFF" maxDisplayedLines="1"/>
	<s:Label text="{data.description}" 
				maxDisplayedLines="2"
				left="52" right="{21 + Number(data.bd.composing==true)*19}"
				top="25"
				bottom="3" 
				color="#969696" color.selectedStates="#a8d2f6" styleName="_contactItemStatus" />

	<s:Image source="{data.bd.ico}" includeInLayout="{data.bd.ico!=null}" right="5" top="5" width="19" smooth="true"   visible.hoveredAndShowsCaret="false"  visible.hovered="false" visible.down="false" />
	<s:Image source="@Embed('../assets/close_tab.png')" mouseDown="closeClick(event)" right="5" top="5" visible="true" visible.normal="false" visible.selected="false"   buttonMode="true"/>
	<s:Image right="5" bottom="5"
			 scaleMode="stretch"
			 smooth="true" smoothingQuality="default"
			 id="_typing"
			 source="{ShowStatusManager.getIco('imcomposing')}"
			 includeInLayout="{data.bd.composing!=null}" visible="{data.bd.composing==true}" 
	    />    

	
</s:ItemRenderer>
