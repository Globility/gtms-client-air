<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 addedToStage="init(event)" creationComplete="cc(event)"
		 xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:view="net.gltd.gtms.view.*" 
		 >
	
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import net.gltd.gtms.controller.Emoticons;
			import net.gltd.gtms.controller.app.SettingsManager;
			import net.gltd.gtms.controller.xmpp.ArchiveManager;
			import net.gltd.gtms.events.ArchiveEvent;
			import net.gltd.gtms.model.contact.BuddyModel;
			import net.gltd.gtms.model.contact.IMBuddyModel;
			import net.gltd.gtms.model.contact.singl.buddiesHolder;
			
			import flashx.textLayout.elements.DivElement;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import org.igniterealtime.xiff.core.EscapedJID;
			import org.igniterealtime.xiff.data.Message;
			
			import spark.events.IndexChangeEvent;
			
			
			[Inject][Bindable]
			public var archive:ArchiveManager;
			
			[Bindable]
			private var chatsList:ArrayCollection;
			
			[Bindable]
			private var roster:ArrayCollection;
			
			[Bindable]
			private			var			_msgTF					:TextFlow = new TextFlow();
			
			[Bindable][Embed(source="../assets/dot.png")]
			private var dot:Class;
			
			
			public var selected:String;
			
			private var	_lastMsg				:Object		= {user:"",date:"",readed:false},
						_lastEntry				:DivElement,
						_colors					:Object = {
										me: {t:0x14478e,b:SettingsManager.CHAT_COLOR},
										buddy: {t:0xd84f0c,b:SettingsManager.CHAT_COLOR},
										info : {t:0x08F8F8F, b:0x08F8F8F}
														},
						_today					:Date = new Date(),
						_emoticons				:Emoticons = Emoticons.getInstance(),
						
						_searchValue			:String;
			
			
			public function select(id:String):void {
				_searchValue = "";
				roster.refresh();
				selected = id;
				for (var i:uint = 0; i<_list.dataProvider.length; i++){
					
					if ( _list.dataProvider.getItemAt(i).id == selected ){
						_list.selectedIndex = i;
						_list.scroller.verticalScrollBar.value = 45 * i;
						chatsList = new ArrayCollection( _list.selectedItem.data.archiveList );
						return;
					}
				}
				_list.validateNow();
			}
			protected function init(event:Event):void
			{
				(FlexGlobals.topLevelApplication as Main)._parslaey.context.viewManager.addViewRoot( this );
				
			}
			protected function cc(event:FlexEvent):void
			{
				callLater(init2);
			}
			private function init2():void {

				var bh:buddiesHolder = buddiesHolder.getInstance();
				roster = new ArrayCollection();
				var bd:BuddyModel;
				for (var i:uint = 0; i<bh.length; i++){
					bd = bh.getBuddy(i);
					if (bd is IMBuddyModel){
						roster.addItem({data:bd,label:bd.nickname});
					}
					if (bd.id == selected){
						_list.selectedItem = bd;
						_list.scroller.verticalScrollBar.value = 45 * i;
						chatsList = new ArrayCollection( bd.archiveList );
					}
				}
				roster.filterFunction = ff;
			}
			protected function list1_changeHandler(event:IndexChangeEvent):void
			{

				if (_list.selectedItem.data.hasOwnProperty('roster') ) {
					try {
						chatsList = new ArrayCollection( _list.selectedItem.data.archiveList );
					}catch (error:Error){
						trace (error.getStackTrace())
					}
				}
				
				
			}
			
			protected function list2_changeHandler(event:IndexChangeEvent):void
			{
		 
				archive.getChat(_list2.selectedItem['with'],_list2.selectedItem['start']);
			}
			
			
			[MessageHandler (selector="onTranscriptReady")]
			public function onTranscriptReady(event:ArchiveEvent):void {
				try {
					//if (event.forJID.bareJID == _list.selectedItem.id && _list2.selectedItem.start == event.data.chat.start){
					if (_list2.selectedItem.start == event.data.chat.start){
						_msgTF = new TextFlow();
						_lastMsg			= {user:"",date:"",readed:false},
						_lastEntry			= null;
						for (var i:int = 0; i<event.data.all.length; i++){
							var m:Message = new Message();
							
							var from:String;
							if ( event.data.all[i].jid != undefined ){
								m.from = new EscapedJID(event.data.all[i].jid);
								from = "buddy";
							}else {
								from = "me";
							}
							m.body = event.data.all[i].body;
							event.data.all[i].time = ArchiveManager.convertToDate( event.data.chat.start, Number(event.data.all[i].secs) );
							
							shapeMessage (m,from,true,true,event.data.all[i].time);
							
							
						}
					}
				}catch (error:Error){
					trace (error.getStackTrace());
				}
				
			}
			public function shapeMessage(m:Message,from:String="buddy",readed:Boolean=false,displayOnTop:Boolean=false,time:Date=null):void {
				if (m == null)return;
		
				var dn:String;
				if(from == "me")dn = "Me";
				else {
					try {
						dn = buddiesHolder.getInstance().getBuddy(m.from.bareJID).nickname;
					}catch (error:Error){
						dn = m.from.bareJID;
					}
				}
				
				displayMessage(dn,time,m.body,from,readed,displayOnTop);
			}
			private function displayMessage(_from:String,_date:Date,_body:String,color:String,readed:Boolean=false,displayOnTop:Boolean=false):void {
				try {
					if (_lastMsg.user != _from+displayOnTop.toString() || Math.abs(Math.floor((_lastMsg.date.time -_date.time)/60000)) > 1 ){
						if (color == null || color.length == 0)color = "buddy";
						_msgTF.addChild( msgTitleElement(_from,_colors[color].t,getDate(_date)) );
					}
					_lastEntry.addChild( msgBodyElement(_body) );
				
					
					_lastMsg.user = _from+displayOnTop.toString();
					_lastMsg.date = _date;
					_lastMsg.readed = readed;
					
				}catch (err:Error){
					trace (err.getStackTrace());
				}
			}
			private function msgTitleElement(nickname:String, nickcolor:int, date:String, onTop:Boolean=false ):DivElement {
				
				var msg:DivElement = new DivElement();
				msg.paddingLeft = msg.paddingRight = 5;
				
				if (_lastEntry!=null){
					createLineElement();
				}else {
					msg.paddingTop = -20;
				}
				var titleDiv:DivElement = new DivElement();
				titleDiv.lineHeight  = SettingsManager.CHAT_FONT_SIZE + 7;
				
				var nickP:ParagraphElement = new ParagraphElement();
				nickP.color = nickcolor;
				//	nickP.fontWeight = "bold";
				var nickSpan:SpanElement =  new SpanElement();
				nickSpan.text = nickname;
				nickP.addChild(nickSpan);
				
				var dateP:ParagraphElement = new ParagraphElement();
				dateP.lineHeight = -SettingsManager.CHAT_FONT_SIZE+3;
				dateP.color = 0xc1c1c1;
				dateP.textAlign = "right";
				dateP.fontSize = SettingsManager.CHAT_FONT_SIZE-1;
				var dateSpan:SpanElement= new SpanElement();
				dateSpan.text = "["+date+"]";
				dateP.addChild(dateSpan);
				
				titleDiv.addChild(nickP);
				titleDiv.addChild(dateP);
				
				
				msg.addChild(titleDiv);
				
				_lastEntry = msg;
				
				return msg;
				
				
				
			}
			private function msgBodyElement(messageBody:String):ParagraphElement {
				
				var p:ParagraphElement = new ParagraphElement();
				var hasIco:Boolean = false;
				var nodes:Array = _emoticons.find(messageBody);
				for (var i:uint = 0; i<nodes.length;i++){
					p.addChild(nodes[i]);
					if (nodes[i] is InlineGraphicElement){
						hasIco = true
					}
				}
				p.paddingLeft = 4;
				if (hasIco){
					p.lineHeight = 30;
				}else {
					p.lineHeight = SettingsManager.CHAT_FONT_SIZE+6;
				}
				return p;
			}
			private function createLineElement():void {

				var line:InlineGraphicElement = new InlineGraphicElement();
				line.source = dot;
				BindingUtils.bindProperty(line,"width",_ta,"width")
				line.height = .5;
				var pn:ParagraphElement = new ParagraphElement();
				
				pn.addChild(line);
				
				_msgTF.addChild(pn);
				
			}
			private function getDate(date:Date):String {
				var min:String = date.getMinutes().toString();
				if (min.length ==1) min = "0"+min;
				var h:String = date.getHours().toString();
				if (h.length ==  1)h = "0"+h;
				if (date.date < _today.date || date.month != _today.month){
					return DateField.dateToString(date, "DD/MM/YYYY")+", "+h+ ":"+min;
				}
				return h+ ":"+min;
			}
			
			public function search(str:String):void {
				_searchValue = str.toLowerCase();
				roster.refresh();
			}
			public function ff(obj:Object):Boolean {
				try {
					return obj.data.searchScope.toLowerCase().indexOf(_searchValue) > -1;
				}catch (error:Error){
				}
				return true;	
			}
				
		
			
		]]>
	</fx:Script>
	<mx:HDividedBox width="100%" height="100%" top="0" horizontalGap="2" dividerColor="#77db40" dividerAffordance="100"  backgroundAlpha="1" backgroundColor="#FFFFFF">
	<s:VGroup width="180" height="100%" paddingLeft="2" paddingTop="2" paddingRight="1">
		<view:SearchBar width="100%" searchFunction="{search}" />	
		<s:List 
			id="_list"
			width="100%"
			horizontalScrollPolicy="off"
			height="100%"
			dataProvider="{roster}"
			itemRenderer="net.gltd.gtms.view.im.contactList.BuddyItemRenderer"
			borderVisible="false"
			change="list1_changeHandler(event)"
			styleName="vmList"
			>
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
			</s:List>
	</s:VGroup>
	<mx:VRule height="100%"/>
	<s:List  
			styleName="bg"
			contentBackgroundAlpha="1"
		
			id="_list2"
			width="190"
			height="100%"
			borderVisible="false"
			change="list2_changeHandler(event)"
			dataProvider="{chatsList}"
			labelField="start"
			horizontalScrollPolicy="off"
			itemRenderer="net.gltd.gtms.view.utils.ListItem2"/>
		<mx:VRule height="100%"/>
	<s:SkinnableContainer id="_content" width="100%" height="100%" backgroundColor="#FFFFFF" backgroundAlpha="1">
		<s:Scroller horizontalScrollPolicy="off" id="msgScroll" width="100%"  top="0" bottom="0" >
			<s:viewport>
				<s:Group clipAndEnableScrolling="true" width="100%" id="_rtG"  >
					<s:RichEditableText id="_ta"  
							editable="false" 
							left="0" right="0" paddingBottom="8" paddingTop="6"
							fontSize="{SettingsManager.CHAT_FONT_SIZE}" color="{SettingsManager.CHAT_COLOR}"
							textFlow="{_msgTF}"
							/>
				</s:Group>
			</s:viewport>
		</s:Scroller>
	</s:SkinnableContainer>
	

	</mx:HDividedBox>
	
	
</s:Group>
