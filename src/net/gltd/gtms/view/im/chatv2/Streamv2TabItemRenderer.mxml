<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:utils="net.gltd.gtms.view.im.utils.*"
				autoDrawBackground="false" rightClick="showContextMenu(event)"
				height="52" width="100%">
	<fx:Script>
		<![CDATA[
			import net.gltd.gtms.GUI.contextMenu.*;
			import net.gltd.gtms.controller.muc.MUCInterfaceManager;
			import net.gltd.gtms.events.ChatEvent;
			import net.gltd.gtms.model.im.AvatarModel;
			
			import mx.collections.ArrayCollection;
			import mx.effects.Resize;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.TextBase;
			
			public override function set data(val:Object):void {
				try {
					label = val.stream.label;
				}catch (e:Error){}
				super.data = val;
			}
		
			
			protected function closeClick(event:MouseEvent):void
			{
				var e:ChatEvent = new ChatEvent(ChatEvent.CHAT_CLOSED);
				e.id = data.id;
				owner.dispatchEvent(e);
				
			}
			private function separate():void {
				data.openNewWindow();
				var e:ChatEvent = new ChatEvent(ChatEvent.SEPARATED_WINDOW);
				e.id = data.id;
				owner.dispatchEvent(e)
			}
			private function moveBack():void {
				data.openNewWindow(true);
				var e:ChatEvent = new ChatEvent(ChatEvent.MOVE_BACK);
				e.id = data.id;
				owner.dispatchEvent(e);
			}
			
			protected function showContextMenu(event:MouseEvent):void
			{
				//var e:ChatEvent = new ChatEvent();
				var newItems:Vector.<net.gltd.gtms.GUI.contextMenu.ContextMenuItem> = new Vector.<net.gltd.gtms.GUI.contextMenu.ContextMenuItem>();
				newItems.push(new net.gltd.gtms.GUI.contextMenu.ContextMenuItem(UIphrases.OPEN_IN_SEPARATE_WINDINDOW,null,owner['dataProvider'].length > 1,false,this.separate) );
				if (data.hasOwnWindow) newItems.push(new net.gltd.gtms.GUI.contextMenu.ContextMenuItem(UIphrases.BACK_TO_MAIN_WINDOW,null,true,false,this.moveBack) );
				
				net.gltd.gtms.GUI.contextMenu.ContextMenu.ShowMenu( event, newItems );
				
			}
			TextBase.mx_internal::truncationIndicatorResource = "...";
		
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DropShadowFilter color="#F9F9F9" alpha=".95" id="_icoShadow" blurX="3" blurY="3" distance="2"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected"  stateGroups="selectedStates" />
		<s:State name="hovered" />
		<s:State name="down" />
		<s:State name="hoveredAndShowsCaret" stateGroups="selectedStates" />
	</s:states>
	<s:Rect radiusX="4" radiusY="4" top="0" left="0" bottom="0" right="0">
		<s:stroke>
			<s:SolidColorStroke color="#dadee2" alpha=".85"/>
		</s:stroke>
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates=".91" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered=".9" alpha=".9"/>
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates="1" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered=".9" alpha="1"/>
				<s:GradientEntry  color.selectedStates="{ styleManager.getMergedStyleDeclaration('.chatIrSelected').getStyle('backgroundColor') }"  alpha.selectedStates="1" color.normal="{data.glowColor}" color="{ styleManager.getMergedStyleDeclaration('.chatIr').getStyle('backgroundColor') }" alpha.hovered="1" alpha="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
 
	<s:Image
		left="6" top="6"
		width="23" height="22"
		id="_avatar" scaleMode="zoom"
		verticalAlign="middle" horizontalAlign="left"
		source="{data.stream.avatar.foto}"
		smooth="true" smoothingQuality="default" />
	<s:BitmapImage
		left="7" bottom="5" filters="{[_icoShadow]}"
		width="13" height="13"
		id="_typeIco" scaleMode="zoom"
		verticalAlign="middle" horizontalAlign="center"
		source="{MUCInterfaceManager.streamIco}" blendMode="multiply"
		smooth="true" smoothingQuality="default" />
	
	<s:Label text="{label}" left="34" right="12" top="8" maxDisplayedLines="1" styleName="_contactItemDN" color="#000000" color.selectedStates="#FFFFFF"/>
	<s:Label text="{data.stream.info}" 
			 maxDisplayedLines="2"
			 left="34" right="17"
			 top="25"
			 bottom="3" 
			 color="#969696" color.selectedStates="#a8d2f6" styleName="_contactItemStatus" />
	<s:Image source="@Embed('../assets/close_tab.png')" mouseDown="closeClick(event)" right="5" top="5" visible="true" visible.normal="false" visible.selected="false"   buttonMode="true"/>


	<!--s:Image right="5" bottom="5"
			 scaleMode="stretch"
			 smooth="true" smoothingQuality="default"
			 id="_typing"
			 source="{ShowStatusManager.getIco('imcomposing')}"
			 includeInLayout="{data.bd.composing!=null}" visible="{data.bd.composing==true}" 
			 /-->    
	
	
	

</s:ItemRenderer>
