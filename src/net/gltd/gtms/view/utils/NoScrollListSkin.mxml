<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark List component.  

      @see spark.components.List
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
      xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="112" maxHeight="{Number.MAX_VALUE}"
      alpha.disabled="0.5" blendMode="normal"> 
    
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.List")]
    ]]>
    </fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import net.gltd.gtms.view.im.contactList.BuddyItemRenderer;
			import net.gltd.gtms.view.im.contactList.ContactGroupItemRenderer;
			
			static private const contentFill:Array = [];
			
			/**
			 * @private
			 */
			override public function get contentItems():Array {return contentFill};
			
			private function itemRenFunc(item:Object):IFactory {
				try {
					if (item.type == "group") return new ClassFactory( ContactGroupItemRenderer );
				}catch (error:Error){
					
				}
				
				return new ClassFactory( BuddyItemRenderer );
				
			}
			
		]]>
	</fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <fx:Declarations>
        <!--- 
              Defines the appearance of the the List's drop indicator.
              To customize the drop indicator appearance, create a custom ListSkin class.
              The List's layout takes care to size and position the dropIndicator.
              The size of the <code>dropIndicator</code> is typically set to the size of the gaps between the items.
              The minimum and maximum settings are typically respected only in the direction
              along the major axis (the gap axis).  For example a VerticalLayout ignores the 
              <code>minWidth</code> and <code>maxWidth</code> settings, 
              but respect <code>minHeight</code> and <code>maxHeight</code>. 
        
              @copy spark.components.List#dropIndicator
        -->
        <fx:Component id="dropIndicator">
            <s:Group minWidth="3" minHeight="3" maxWidth="3" maxHeight="3">
                <s:Rect left="0" right="0" top="0" bottom="0">
                    <s:fill>
                        <!--- Defines the color of the background. -->
                        <s:SolidColor color="0xBBBBBB" />
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke color="0x868686" weight="1"/>
                    </s:stroke>
                </s:Rect>
            </s:Group>
        </fx:Component>
    </fx:Declarations>

    <!-- border -->
    <!--- @private -->
  
    
    <!-- fill -->
    <!--- Defines the background appearance of the list-based component. -->
  
    <!--- The Scroller component to add scroll bars to the list. -->
       <!--- @copy spark.components.SkinnableDataContainer#dataGroup -->
        <s:DataGroup id="dataGroup" width="100%" height="100%" maxHeight="{Number.MAX_VALUE}" itemRenderer="net.gltd.gtms.view.im.contactList.BuddyItemRenderer" >
            <s:layout>
                <!--- The default layout is vertical and measures at least for 5 rows.  
                When switching to a different layout, HorizontalLayout for example,
                make sure to adjust the minWidth, minHeight sizes of the skin -->
                <s:VerticalLayout gap="1" horizontalAlign="contentJustify" requestedMinRowCount="5" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" />
            </s:layout>
        </s:DataGroup> 
</s:SparkSkin>
